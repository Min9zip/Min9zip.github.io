{"pages":[],"posts":[{"title":"Initial Settings for Machine Learning","text":"Let’s find out the initial setting and mechanism of machine learning sequentially Update Parameters Using Black Propagation.Simple Deep Learning Model Design STEP1. GPU Setting123456import torchif torch.cuda.is_available(): DEVICE = torch.device('cuda')else: DEVICE = torch.device('cpu') First setting is GPU. If it’s impossible, CPU. STEP2. Basic Value and Data SamplingBATCH_SIZE : the number of data caculated when updating parametersINPUT_SIZE : the size of INPUT and the number of nodes in the input layer. 1(BATCH_SIZE, INPUT_SIZE) HIDDEN_SIZE : the number of parameters to be calculated once more in the result of calculating INPUT using multiple parameters. (64, 1000) to matrix multiplication ~ (1000, 100) and matrix multiplication calculation. OUTPUT_SIZE : magnitude of the vector of final output value. 123456789BATCH_SIZE = 64INPUT_SIZE = 1000HIDDEN_SIZE = 100OUTPUT_SIZE = 10x = torch.randn(BATCH_SIZE, INPUT_SIZE, device = DEVICE, dtype = torch.float, requires_grad = False)y = torch.randn(BATCH_SIZE, OUTPUT_SIZE, device = DEVICE, dtype = torch.float, requires_grad = False)w1 = torch.randn(INPUT_SIZE, HIDDEN_SIZE, device=DEVICE, dtype=torch.float, requires_grad=True)w2 = torch.randn(HIDDEN_SIZE, OUTPUT_SIZE, device=DEVICE, dtype=torch.float, requires_grad=True) ‘randn’ is a value sampled from a normal distribution with a mean of 0 and standard deviation of 1 STEP3. Realize LearningWrite a code that implements a deep learning model. 1234567891011121314learning_rate = 1e-6 for t in range(1, 501): y_pred = x.mm(w1).clamp(min = 0).mm(w2) loss = (y_pred - y).pow(2).sum() if t % 100 == 0: print(&quot;Iteration: &quot;, t, &quot;\\t&quot;, &quot;Loss: &quot;, loss.item()) loss.backward() # back propagation 적용 시, 새로 계산함. with torch.no_grad(): w1 -= learning_rate * w1.grad w2 -= learning_rate * w2.grad w1.grad.zero_() # Gradient 값으로 0으로 설정. w2.grad.zero_() A method in which the minimum value is 0, and a value greater than 0 is self-embedded. The calmp function applies a nonlinear function. Reference materials Site","link":"/2021/10/21/hello-world/"}],"tags":[],"categories":[]}